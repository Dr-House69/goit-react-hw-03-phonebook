{"version":3,"sources":["components/Filter/Filter.module.scss","components/ContactsList/ContactsList.module.scss","components/ContactsForm/ContactsForm.js","components/ContactsList/ContactsListItem.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/ContactsForm/ContactsForm.module.scss"],"names":["module","exports","ContactsForm","state","name","number","nameId","nanoid","telId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","styles","form","this","label","htmlFor","input","type","pattern","title","required","onChange","id","button","Component","ContactsListItem","contact","onDeleteContact","info","onClick","ContactsList","contacts","length","warning","list","map","item","Filter","WrapperPhonebook","App","filter","addNewContact","newContact","find","toLowerCase","alert","deleteContact","contactId","previousState","handleChangeFilter","getFilteredContacts","filtered","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","nextContacts","setItem","stringify","filteredContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0c38044.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2xyYP\",\"input\":\"Filter_input__L4u0z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__B4Xly\",\"item\":\"ContactsList_item__1qn9Q\",\"info\":\"ContactsList_info__1O_lB\",\"button\":\"ContactsList_button__zFPK0\",\"warning\":\"ContactsList_warning__2f-DD\"};","import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport styles from './ContactsForm.module.scss';\nimport PropTypes from 'prop-types';\n\nclass ContactsForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  nameId = nanoid();\n  telId = nanoid();\n\n  handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <label className={styles.label} htmlFor={this.nameId}>\n          Name\n          <input\n            className={styles.input}\n            type='text'\n            name='name'\n            value={this.state.name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={this.handleChange}\n            id={this.nameId}\n          />\n        </label>\n\n        <label className={styles.label} htmlFor={this.telId}>\n          Number\n          <input\n            className={styles.input}\n            type='tel'\n            name='number'\n            value={this.state.number}\n            pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n            title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n            required\n            onChange={this.handleChange}\n            id={this.telId}\n          />\n        </label>\n        <button className={styles.button} type='submit'>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactsForm;\n","import styles from \"./ContactsList.module.scss\";\nimport PropTypes from \"prop-types\";\n\nconst ContactsListItem = ({ contact, onDeleteContact }) => (\n  <>\n    <span className={styles.info}>\n      {contact.name}: {contact.number}\n    </span>\n    <button\n      className={styles.button}\n      type=\"button\"\n      onClick={() => onDeleteContact(contact.id)}\n    >\n      Delete\n    </button>\n  </>\n);\n\nContactsListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsListItem;\n","import styles from \"./ContactsList.module.scss\";\nimport PropTypes from \"prop-types\";\nimport ContactsListItem from \"./ContactsListItem\";\n\nconst ContactsList = ({ contacts, onDeleteContact }) =>\n  contacts.length === 0 ? (\n    <div className={styles.warning}>You have no contacts!</div>\n  ) : (\n    <ul className={styles.list}>\n      {contacts.map((contact) => (\n        <li key={contact.id} className={styles.item}>\n          <ContactsListItem\n            contact={contact}\n            onDeleteContact={onDeleteContact}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import styles from \"./Filter.module.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className={styles.label}>\n      Find contacts\n      <input\n        className={styles.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport ContactsForm from \"./components/ContactsForm/ContactsForm\";\nimport ContactsList from \"./components/ContactsList/ContactsList\";\nimport Filter from \"./components/Filter/Filter\";\nimport \"./App.scss\";\n\nconst WrapperPhonebook = [\"WrapperPhonebook\"];\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\n    }\n  }\n\n  addNewContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    contacts.find(\n      (contact) => newContact.name.toLowerCase() === contact.name.toLowerCase()\n    )\n      ? alert(`${newContact.name} is already in contacts`)\n      : this.setState(({ contacts }) => ({\n          contacts: [newContact, ...contacts],\n        }));\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((previousState) => ({\n      contacts: previousState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  handleChangeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const filtered = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filtered)\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <div className={WrapperPhonebook}>\n        <h1>Phonebook</h1>\n        <ContactsForm onSubmit={this.addNewContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.handleChangeFilter} />\n        <ContactsList\n          contacts={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__3U3nv\",\"label\":\"ContactsForm_label__3E4rh\",\"input\":\"ContactsForm_input__1lOid\",\"button\":\"ContactsForm_button__1_uRx\"};"],"sourceRoot":""}